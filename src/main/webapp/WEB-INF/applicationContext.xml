<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	
	<context:annotation-config/>
	<context:component-scan base-package="es.justWeddings"/>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/justWeddings?useSSL=false" />
		<property name="username" value="justWedding" />
		<property name="password" value="Wedding0" />
	</bean>
	
	<bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="persistenceUnitName" value="weddingUnit"/>
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan">
            <list>
                <value>es.justWeddings.domain</value>
                <value>es.justWeddings.dao</value>
            </list>
        </property>
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">validate</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <!--  
            <prop key="hibernate.hbm2ddl.auto">update</prop>
            -->
            <!-- 
             <prop key="hibernate.show_sql">true</prop>
             -->
         </props>
      </property>
   </bean>
  
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean>
   <bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener" />
    
   <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
       <tx:annotation-driven/>
       
       <!-- SECURITY  -->
        <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    		<constructor-arg name="strength" value="12"/>
		</bean>
        <security:http auto-config="true" use-expressions="true" >
	       <security:intercept-url pattern="/login.xhtml" access="permitAll" />
	       <security:intercept-url pattern="/javax.faces.resource/**" access="permitAll" />
	       <security:intercept-url pattern="/resources/**" access="permitAll" />
	       <!--  
	        <security:intercept-url pattern="/login.xhtml" access="permitAll" />
	        <security:intercept-url pattern="/javax.faces.resource/**" access="permitAll" />
	       --> 
	        <!-- <security:intercept-url pattern="/**" access="isAuthenticated()" /> 
	        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
	        -->
	        <security:intercept-url pattern="/**" access="authenticated" />
	        <security:form-login login-page="/login.xhtml" login-processing-url="/j_spring_security_check"
	            authentication-failure-url="/login.xhtml?error=true" authentication-success-forward-url="/homme.xhtml"
	            username-parameter="username" password-parameter="password"/>
            <security:csrf disabled="true" />
            <!--  
            <security:session-management session-fixation-protection="newSession"/>
            -->
   		 </security:http>
 		 <security:authentication-manager id="authenticationManager">
 		   	<security:authentication-provider>
				<security:jdbc-user-service data-source-ref="dataSource" 
					users-by-username-query="select EMAIL, PASSWORD,'true' from users where EMAIL=?"
					authorities-by-username-query="select EMAIL, PASSWORD, 'ROLE_USER' from users where EMAIL=?"/>
					<security:password-encoder ref="bCryptPasswordEncoder"/>
				</security:authentication-provider>
		</security:authentication-manager>
</beans>
